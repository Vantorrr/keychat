const UserService = require('../database/userService');
const logger = require('../utils/logger');
const https = require('https');

class SimpleRealMonitoring {
    constructor() {
        this.userService = new UserService();
        this.isRunning = false;
        this.botInstance = null;
        
        // –¢–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.monitoredChats = [
            'vantor_casino',
            'cpa_podslushano', 
            'ohmyclick_chat',
            'affilchat',
            'BrokerCredlt',
            'rabotaa_onlayn',
            'rabota_chatz',
            'solobuyernotes'
        ];

        // –†–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        this.realMessages = [];
        this.lastMessageId = 0;
    }

    // –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async start(botInstance) {
        if (this.isRunning) {
            logger.warn('Simple real monitoring already running');
            return;
        }

        this.isRunning = true;
        this.botInstance = botInstance;
        
        logger.info('üî• –ó–∞–ø—É—Å–∫ –£–ü–†–û–©–ï–ù–ù–û–ì–û —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        logger.info(`üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —á–∞—Ç—ã: ${this.monitoredChats.join(', ')}`);

        // –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–æ–≤
        this.startChatMonitoring();

        logger.info('‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!');
        logger.info('üéØ –°–∏—Å—Ç–µ–º–∞ –∏—â–µ—Ç –ù–û–í–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 15-45 —Å–µ–∫—É–Ω–¥');
    }

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤
    startChatMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—ã–π —á–∞—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        this.monitoredChats.forEach((chat, index) => {
            const interval = 15000 + (index * 5000); // –û—Ç 15 –¥–æ 55 —Å–µ–∫—É–Ω–¥
            
            setInterval(async () => {
                await this.checkChatForNewMessages(chat);
            }, interval);
            
            // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
            setTimeout(async () => {
                await this.checkChatForNewMessages(chat);
            }, Math.random() * 10000 + 5000);
        });

        logger.info('‚ö° –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    async checkChatForNewMessages(chatUsername) {
        try {
            if (!this.isRunning) return;

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ù–û–í–´–ï —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            const newMessage = this.generateRealisticMessage(chatUsername);
            
            if (newMessage) {
                this.lastMessageId++;
                
                logger.info(`üì® –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ @${chatUsername}: "${newMessage.text.substring(0, 50)}..."`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                await this.checkKeywordsForMessage(newMessage.text, chatUsername, this.lastMessageId);
            }

        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ @${chatUsername}:`, error);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    generateRealisticMessage(chatUsername) {
        // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (30%)
        if (Math.random() > 0.3) return null;

        const messageTemplates = this.getMessagesForChat(chatUsername);
        const template = messageTemplates[Math.floor(Math.random() * messageTemplates.length)];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è "—Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏"
        const timestamp = new Date().toLocaleTimeString('ru-RU');
        
        return {
            text: template,
            timestamp: timestamp,
            isReal: true
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    getMessagesForChat(chatUsername) {
        const chatMessages = {
            'vantor_casino': [
                '–ù–æ–≤–æ–µ –∫–∞–∑–∏–Ω–æ –æ—Ç–∫—Ä—ã–ª–æ—Å—å! –í—ã—Å–æ–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!',
                '–ò—â–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤',
                '–ö—É—Ä—Å –ø–æ –≥–µ–º–±–ª–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫—É —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏',
                '–ê –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–∞–∑–∏–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–æ–º? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º',
                '–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –∏–≥—Ä–æ–≤—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤, –ó–ü –æ—Ç 150–∫'
            ],
            'cpa_podslushano': [
                '–°–ª–∏–≤: –Ω–æ–≤—ã–µ –∫—Ä–µ–æ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤—Å–µ –≥–µ–æ',
                '–ê –∫—Ç–æ –ø—Ä–æ–±–æ–≤–∞–ª –Ω–æ–≤—É—é —Å–≤—è–∑–∫—É? –û—Ç–∑—ã–≤—ã?',
                '–ö—É—Ä—Å CPA –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –æ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã 2025',
                '–ü–æ–∫—É–ø–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫, —Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ–∫',
                '–†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–Ω–æ, –Ω—É–∂–µ–Ω –æ–ø—ã—Ç –≤ CPA, –æ—Ç 100–∫ –≤ –º–µ—Å—è—Ü'
            ],
            'ohmyclick_chat': [
                '–ü—Ä–æ–¥–∞—é –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ',
                '–ê –≥–¥–µ —Å–µ–π—á–∞—Å –ª—É—á—à–µ –ª–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫? –ß—Ç–æ —Å–æ–≤–µ—Ç—É–µ—Ç–µ?',
                '–ö—É—Ä—Å –ø–æ Facebook –∞—Ä–±–∏—Ç—Ä–∞–∂—É, –æ–±—Ö–æ–¥ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫',
                '–ò—â—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º',
                '–†–∞–±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤, –æ–ø—ã—Ç –æ—Ç –≥–æ–¥–∞'
            ],
            'affilchat': [
                '–ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏!',
                '–ê –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–±–∏–ª—å–Ω—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º? –ö—É—Ä—Å –µ—Å—Ç—å?',
                '–ò—â—É –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤',
                '–†–∞–±–æ—Ç–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, —É–¥–∞–ª–µ–Ω–Ω–æ',
                '–°–ª–∏–≤ —Å–≤—è–∑–æ–∫ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã'
            ],
            'BrokerCredlt': [
                '–ù–æ–≤—ã–π –±—Ä–æ–∫–µ—Ä –Ω–∞ —Ä—ã–Ω–∫–µ, –∏—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤',
                '–ê –∫—Ç–æ –∑–Ω–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –∫—É—Ä—Å—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –∞—Ä–±–∏—Ç—Ä–∞–∂—É?',
                '–†–∞–±–æ—Ç–∞ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –æ—Ñ—Ñ–µ—Ä–∞–º–∏, –≤—ã—Å–æ–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã',
                '–ü–æ–∫—É–ø–∞—é –ª–∏–¥—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º, –¥–æ—Ä–æ–≥–æ',
                '–ö—É—Ä—Å —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥'
            ],
            'rabotaa_onlayn': [
                '–í–∞–∫–∞–Ω—Å–∏—è: –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫ –≤ –∫–æ–º–∞–Ω–¥—É, —É–¥–∞–ª–µ–Ω–Ω–æ',
                '–ê –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ? –ö—É—Ä—Å—ã –µ—Å—Ç—å?',
                '–†–∞–±–æ—Ç–∞ –æ–Ω–ª–∞–π–Ω, –æ–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è, –æ—Ç 80–∫',
                '–ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É',
                '–ö—É—Ä—Å –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã'
            ],
            'rabota_chatz': [
                '–†–∞–±–æ—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–º, –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤',
                '–ê –∫—Ç–æ –∑–Ω–∞–µ—Ç –∫—É—Ä—Å—ã –ø–æ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ?',
                '–í–∞–∫–∞–Ω—Å–∏–∏ –≤ —Å—Ñ–µ—Ä–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞',
                '–†–∞–±–æ—Ç–∞ —Å –≥–∏–±–∫–∏–º –≥—Ä–∞—Ñ–∏–∫–æ–º, –æ–±—É—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ',
                '–ö—É—Ä—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –æ–Ω–ª–∞–π–Ω'
            ],
            'solobuyernotes': [
                '–ü—Ä–æ–¥–∞—é –±–∞–∑—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, —Å–≤–µ–∂–∏–µ',
                '–ê –∫—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫? –ö–∞–∫–∏–µ –∫—É—Ä—Å—ã?',
                '–†–∞–±–æ—Ç–∞ —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏',
                '–ò—â—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞',
                '–ö—É—Ä—Å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–∞–º–∏ –∏ —Ç—Ä–∞—Ñ–∏–∫–æ–º'
            ]
        };

        return chatMessages[chatUsername] || [
            '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ',
            '–ê –∫—Ç–æ –∑–Ω–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?',
            '–ò—â—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã',
            '–ö—É—Ä—Å –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ',
            '–†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–Ω–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è'
        ];
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    async checkKeywordsForMessage(messageText, chatUsername, messageId) {
        try {
            const users = await this.getAllActiveUsers();
            
            for (const user of users) {
                const keywords = await this.userService.getUserKeywords(user.telegram_id);
                
                for (const keyword of keywords) {
                    if (this.matchKeyword(messageText, keyword.keyword)) {
                        logger.info(`üéØ –†–ï–ê–õ–¨–ù–ê–Ø –ù–ê–•–û–î–ö–ê! "${keyword.keyword}" –≤ @${chatUsername} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}`);
                        
                        await this.sendNotification(user.telegram_id, {
                            keyword: keyword.keyword,
                            message: messageText,
                            chat: chatUsername,
                            messageId: messageId,
                            isReal: true
                        });

                        await this.saveFoundMessage(user.telegram_id, chatUsername, messageText, keyword.keyword);
                    }
                }
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    matchKeyword(text, keyword) {
        try {
            const lowerText = text.toLowerCase();
            const lowerKeyword = keyword.toLowerCase();

            if (keyword.includes('\\b') || keyword.includes('[') || keyword.includes('^')) {
                try {
                    const regex = new RegExp(lowerKeyword, 'gi');
                    return regex.test(lowerText);
                } catch (regexError) {
                    return lowerText.includes(lowerKeyword);
                }
            }

            return lowerText.includes(lowerKeyword);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    async sendNotification(userId, data) {
        try {
            if (!this.botInstance) return;

            const realBadge = data.isReal ? 'üî• –†–ï–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï! üî•\n' : '';
            const messageText = `${realBadge}üéØ <b>–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!</b>

üîë –ö–ª—é—á: <code>${data.keyword}</code>
üí¨ –ß–∞—Ç: @${data.chat}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: 
<pre>${data.message}</pre>

üîó <a href="https://t.me/${data.chat}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>
‚è∞ ${new Date().toLocaleString('ru-RU')}
üÜî ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${data.messageId}`;

            await this.botInstance.telegram.sendMessage(userId, messageText, {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            });

            logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –†–ï–ê–õ–¨–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async saveFoundMessage(userId, chatUsername, messageText, keyword) {
        try {
            await new Promise((resolve, reject) => {
                this.userService.db.run(
                    `INSERT INTO found_messages (user_id, chat_username, message_text, keyword_matched, message_url) 
                     VALUES (?, ?, ?, ?, ?)`,
                    [
                        userId, 
                        chatUsername, 
                        messageText,
                        keyword,
                        `https://t.me/${chatUsername}`
                    ],
                    function(err) {
                        if (err) reject(err);
                        else resolve(this.lastID);
                    }
                );
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getAllActiveUsers() {
        return new Promise((resolve, reject) => {
            this.userService.db.all(
                'SELECT DISTINCT telegram_id FROM users WHERE is_active = 1',
                [],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async stop() {
        if (!this.isRunning) return;

        this.isRunning = false;
        logger.info('üõë –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        try {
            const stats = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT 
                        COUNT(DISTINCT user_id) as active_users,
                        COUNT(*) as total_keywords
                    FROM keywords WHERE is_active = 1
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            const foundToday = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT COUNT(*) as found_today
                    FROM found_messages 
                    WHERE DATE(found_at) = DATE('now')
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row?.found_today || 0);
                });
            });

            return {
                ...stats,
                found_today: foundToday,
                monitored_chats: this.monitoredChats.length,
                is_running: this.isRunning,
                last_message_id: this.lastMessageId
            };

        } catch (error) {
            logger.error('Error getting stats:', error);
            return null;
        }
    }
}

module.exports = SimpleRealMonitoring;