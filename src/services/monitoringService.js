const UserService = require('../database/userService');
const DirectRealMonitoring = require('./directRealMonitoring');
const cron = require('cron');
const logger = require('../utils/logger');

class MonitoringService {
    constructor() {
        this.userService = new UserService();
        this.directRealMonitoring = new DirectRealMonitoring();
        this.isRunning = false;
        this.botInstance = null;
    }

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async start(botInstance) {
        if (this.isRunning) {
            logger.warn('Monitoring service already running');
            return;
        }

        this.isRunning = true;
        this.botInstance = botInstance;
        
        logger.info('üöÄ Starting KeyChat monitoring service...');

        // –ü–ï–†–ï–î–ê–ï–ú –ö–ê–ù–ê–õ–´ –ò–ó –ê–î–ú–ò–ù–ö–ò –í –†–ï–ê–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì
        if (this.directRealMonitoring.updateMonitoredChats) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π adminHandler –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (global.adminHandler && typeof global.adminHandler.getChannels === 'function') {
                    logger.info('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏...');
                    const channels = await global.adminHandler.getChannels();
                    const channelUsernames = channels.map(ch => ch.username);
                    
                    // –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
                    console.log('üîç –û–¢–õ–ê–î–ö–ê –ö–ê–ù–ê–õ–û–í:');
                    console.log('üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ë–î:', channels.length);
                    console.log('üìù –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:', channelUsernames.join(', '));
                    console.log('üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:', channels.filter(ch => ch.is_active).map(ch => ch.username).join(', '));
                    
                    await this.directRealMonitoring.updateMonitoredChats(channelUsernames);
                    logger.info(`‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–æ ${channelUsernames.length} –∫–∞–Ω–∞–ª–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥`);
                } else {
                    logger.warn('‚ö†Ô∏è  AdminHandler –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã');
                }
            } catch (err) {
                logger.warn('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏:', err.message);
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', err);
            }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ü–†–Ø–ú–û–ô –†–ï–ê–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        try {
            await this.directRealMonitoring.start(botInstance);
            logger.info('‚úÖ –ü–†–Ø–ú–û–ô –†–ï–ê–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error);
        }

        // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
        this.cleanupJob = new cron.CronJob('0 * * * *', async () => {
            await this.cleanupExpiredSubscriptions();
        }, null, true);

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        this.statsJob = new cron.CronJob('*/10 * * * *', async () => {
            await this.logStatistics();
        }, null, true);

        logger.info('‚úÖ Monitoring service started successfully');
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async stop() {
        if (!this.isRunning) {
            return;
        }

        this.isRunning = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ü–†–Ø–ú–û–ô –†–ï–ê–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if (this.directRealMonitoring) {
            await this.directRealMonitoring.stop();
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cron –∑–∞–¥–∞—á–∏
        if (this.cleanupJob) {
            this.cleanupJob.stop();
        }
        if (this.statsJob) {
            this.statsJob.stop();
        }
        
        logger.info('üõë Monitoring service stopped');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async getMonitoringStats() {
        try {
            const stats = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT 
                        COUNT(DISTINCT user_id) as active_users,
                        COUNT(*) as total_keywords
                    FROM keywords WHERE is_active = 1
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            const foundToday = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT COUNT(*) as found_today
                    FROM found_messages 
                    WHERE DATE(found_at) = DATE('now')
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row?.found_today || 0);
                });
            });

            const interfaceStats = await this.directRealMonitoring.getStats();
            return {
                ...stats,
                found_today: foundToday,
                monitored_chats: interfaceStats.monitored_chats,
                is_running: this.isRunning,
                mode: interfaceStats.mode
            };

        } catch (error) {
            logger.error('Error getting monitoring stats:', error);
            return null;
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    async cleanupExpiredSubscriptions() {
        try {
            logger.info('üßπ Cleaning up expired subscriptions...');
            
            const result = await new Promise((resolve, reject) => {
                this.userService.db.run(`
                    UPDATE user_subscriptions 
                    SET is_active = 0 
                    WHERE expires_at < CURRENT_TIMESTAMP AND expires_at IS NOT NULL
                `, [], function(err) {
                    if (err) reject(err);
                    else resolve(this.changes);
                });
            });

            if (result > 0) {
                logger.info(`‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${result} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫`);
            }
            
        } catch (error) {
            logger.error('Error in cleanup:', error);
        }
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async logStatistics() {
        try {
            const stats = await this.getMonitoringStats();
            if (stats) {
                logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', stats);
            }
        } catch (error) {
            logger.error('Error logging statistics:', error);
        }
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    async simulateFoundMessage(userId, chatUsername, messageText, keyword) {
        try {
            const userService = new UserService();
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
            await new Promise((resolve, reject) => {
                userService.db.run(
                    `INSERT INTO found_messages (user_id, chat_username, message_text, keyword_matched) 
                     VALUES (?, ?, ?, ?)`,
                    [userId, chatUsername, messageText, keyword],
                    function(err) {
                        if (err) reject(err);
                        else resolve(this.lastID);
                    }
                );
            });

            console.log(`üì® Simulated message found for user ${userId}: ${keyword} in ${chatUsername}`);
            
            userService.close();
        } catch (error) {
            console.error('‚ùå Error simulating message:', error);
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–ï–ó –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê!
    async updateChannelsFromAdmin() {
        if (!this.isRunning) {
            logger.warn('‚ö†Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∫–∞–Ω–∞–ª—ã –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            return false;
        }

        try {
            if (global.adminHandler && typeof global.adminHandler.getChannels === 'function') {
                logger.info('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏...');
                const channels = await global.adminHandler.getChannels();
                const channelUsernames = channels.map(ch => ch.username);
                
                console.log('üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–û–í:');
                console.log('üìä –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:', channelUsernames.join(', '));
                
                if (this.directRealMonitoring.updateMonitoredChats) {
                    await this.directRealMonitoring.updateMonitoredChats(channelUsernames);
                    logger.info(`‚úÖ –ö–∞–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –í—Å–µ–≥–æ: ${channelUsernames.length}`);
                    return true;
                }
            }
        } catch (err) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:', err);
        }
        return false;
    }
}

module.exports = MonitoringService;