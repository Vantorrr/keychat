const UserService = require('../database/userService');
const logger = require('../utils/logger');

class DemoMonitoring {
    constructor() {
        this.userService = new UserService();
        this.isRunning = false;
        this.botInstance = null;
        
        // –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã—Ö —á–∞—Ç–æ–≤ (—Ç–æ—á–Ω—ã–µ –∏–º–µ–Ω–∞ –∫–∞–∫ –≤ Telegram)
        this.monitoredChats = [
            'vantor_casino',
            'cpa_podslushano', 
            'ohmyclick_chat',
            'affilchat',
            'BrokerCredlt',
            'rabotaa_onlayn',
            'rabota_chatz',
            'solobuyernotes'
        ];

        // –î–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ (—Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)
        this.demoMessages = [
            // –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–æ–º "–∫—É—Ä—Å"
            { text: '–ü—Ä–æ–¥–∞—é –∫—É—Ä—Å –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É —Ç—Ä–∞—Ñ–∏–∫–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã', chat: 'affilchat' },
            { text: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫—É—Ä—Å –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ', chat: 'rabotaa_onlayn' },
            { text: '–ö—É—Ä—Å –≤–∞–ª—é—Ç —Å–µ–≥–æ–¥–Ω—è –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏', chat: 'cpa_podslushano' },
            { text: '–ù–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–º—É –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É, —Å–∫–∏–¥–∫–∞ 70%', chat: 'vantor_casino' },
            { text: '–ó–∞–∫—Ä—ã—Ç—ã–π –∫—É—Ä—Å –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤, –≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º', chat: 'BrokerCredlt' },
            
            // –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–æ–º "–∞" (–º–Ω–æ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–π)
            { text: '–ê –∫—Ç–æ –∑–Ω–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞?', chat: 'affilchat' },
            { text: '–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, –∞ –Ω–µ —Å–æ–ª–æ', chat: 'rabotaa_onlayn' },
            { text: '–ò—â—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –∞ –Ω–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞', chat: 'cpa_podslushano' },
            { text: '–ê –≥–¥–µ –Ω–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –¥–µ—à–µ–≤–æ?', chat: 'ohmyclick_chat' },
            { text: '–ü–æ–∫—É–ø–∞—é –ª–∏–¥—ã, –∞ –ø—Ä–æ–¥–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç', chat: 'solobuyernotes' },
            
            // –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            { text: '–ò—â—É –∞—Ä–±–∏—Ç—Ä–∞–∂ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å —Ö–æ—Ä–æ—à–µ–π –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π', chat: 'affilchat' },
            { text: '–†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–Ω–æ, –æ–ø–ª–∞—Ç–∞ –æ—Ç 100–∫', chat: 'rabotaa_onlayn' },
            { text: '–ù–æ–≤—ã–π –∫–∞–∑–∏–Ω–æ –±—Ä–µ–Ω–¥ –∏—â–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', chat: 'vantor_casino' },
            { text: '–°–ª–∏–≤ —Å–≤—è–∑–æ–∫ –¥–ª—è —Ç—Ä–∞—Ñ–∏–∫–∞', chat: 'BrokerCredlt' },
            { text: '–ü–æ–∫—É–ø–∞—é —Ç—Ä–∞—Ñ–∏–∫ –¥–æ—Ä–æ–≥–æ, –æ—Ç 10–∫ –≤ –¥–µ–Ω—å', chat: 'ohmyclick_chat' },
            { text: '–ü—Ä–æ–¥–∞—é –±–∞–∑—ã, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏', chat: 'solobuyernotes' },
            { text: '–ò—â—É –º–µ–Ω—Ç–æ—Ä–∞, –≥–æ—Ç–æ–≤ –ø–ª–∞—Ç–∏—Ç—å', chat: 'affilchat' },
            { text: '–†–∞–±–æ—Ç–∞ –≤ –æ—Ñ–∏—Å–µ, –ó–ü 150–∫', chat: 'rabotaa_onlayn' },
            { text: '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞', chat: 'cpa_podslushano' },
            { text: '–ü–∞—Ä—Ç–Ω–µ—Ä–∫–∞ —Å –≤—ã—Å–æ–∫–∏–º–∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏', chat: 'vantor_casino' },
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å "–∞"
            { text: '–ê —É –∫–æ–≥–æ –µ—Å—Ç—å –æ–ø—ã—Ç –≤ CPA?', chat: 'cpa_podslushano' },
            { text: '–ù—É–∂–µ–Ω –ø–æ–º–æ—â–Ω–∏–∫, –∞ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', chat: 'rabotaa_onlayn' },
            { text: '–ê –º–æ–∂–µ—Ç –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º –≤–º–µ—Å—Ç–µ?', chat: 'rabota_chatz' },
            { text: '–ö—É—Ä—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∞ –Ω–∞–≤—ã–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å', chat: 'affilchat' }
        ];
        
        this.messageIndex = 0;
    }

    // –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async start(botInstance) {
        if (this.isRunning) {
            logger.warn('Demo monitoring already running');
            return;
        }

        this.isRunning = true;
        this.botInstance = botInstance;
        
        logger.info('üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ KeyChat...');
        logger.info(`üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —á–∞—Ç—ã: ${this.monitoredChats.join(', ')}`);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (—á–∞—â–µ –¥–ª—è –¥–µ–º–æ)
        this.monitoringInterval = setInterval(async () => {
            await this.simulateMessageCheck();
        }, 30000);

        // –ü–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        setTimeout(async () => {
            await this.simulateMessageCheck();
        }, 5000);

        logger.info('‚úÖ –î–µ–º–æ-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)');
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async stop() {
        if (!this.isRunning) return;

        this.isRunning = false;
        
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
        }
        
        logger.info('üõë –î–µ–º–æ-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    async simulateMessageCheck() {
        try {
            if (!this.isRunning) return;

            // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
            const demoMessage = this.demoMessages[this.messageIndex % this.demoMessages.length];
            this.messageIndex++;

            logger.debug(`üîç –î–µ–º–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ @${demoMessage.chat}: "${demoMessage.text.substring(0, 30)}..."`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await this.checkKeywordsForMessage(demoMessage.text, demoMessage.chat);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    async checkKeywordsForMessage(messageText, chatUsername) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
            const users = await this.getAllActiveUsers();
            
            for (const user of users) {
                const keywords = await this.userService.getUserKeywords(user.telegram_id);
                
                for (const keyword of keywords) {
                    if (this.matchKeyword(messageText, keyword.keyword)) {
                        logger.info(`üéØ –ù–ê–ô–î–ï–ù–û! –ö–ª—é—á "${keyword.keyword}" –≤ @${chatUsername} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}`);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        await this.sendNotification(user.telegram_id, {
                            keyword: keyword.keyword,
                            message: messageText,
                            chat: chatUsername,
                            messageId: Date.now()
                        });

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                        await this.saveFoundMessage(user.telegram_id, chatUsername, messageText, keyword.keyword);
                    }
                }
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    matchKeyword(text, keyword) {
        try {
            const lowerText = text.toLowerCase();
            const lowerKeyword = keyword.toLowerCase();

            // –ï—Å–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç regex-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
            if (keyword.includes('\\b') || keyword.includes('[') || keyword.includes('^')) {
                try {
                    const regex = new RegExp(lowerKeyword, 'gi');
                    return regex.test(lowerText);
                } catch (regexError) {
                    // –ï—Å–ª–∏ regex –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∏—â–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
                    return lowerText.includes(lowerKeyword);
                }
            }

            // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–æ—Ä–Ω—é —Å–ª–æ–≤–∞
            return lowerText.includes(lowerKeyword);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    async sendNotification(userId, data) {
        try {
            if (!this.botInstance) return;

            const cleanMessage = data.message.replace(/[<>&]/g, (match) => {
                const map = { '<': '&lt;', '>': '&gt;', '&': '&amp;' };
                return map[match];
            });
            
            const messageText = `üéØ <b>–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!</b>

üîë –ö–ª—é—á: <code>${data.keyword}</code>
üí¨ –ß–∞—Ç: @${data.chat}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: 
<pre>${cleanMessage.length > 300 ? cleanMessage.substring(0, 300) + '...' : cleanMessage}</pre>

üîó <a href="https://t.me/${data.chat}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>
‚è∞ ${new Date().toLocaleString('ru-RU')}`;

            await this.botInstance.telegram.sendMessage(userId, messageText, {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            });

            logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
    async saveFoundMessage(userId, chatUsername, messageText, keyword) {
        try {
            await new Promise((resolve, reject) => {
                this.userService.db.run(
                    `INSERT INTO found_messages (user_id, chat_username, message_text, keyword_matched, message_url) 
                     VALUES (?, ?, ?, ?, ?)`,
                    [
                        userId, 
                        chatUsername, 
                        messageText.substring(0, 1000), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                        keyword,
                        `https://t.me/${chatUsername}`
                    ],
                    function(err) {
                        if (err) reject(err);
                        else resolve(this.lastID);
                    }
                );
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getAllActiveUsers() {
        return new Promise((resolve, reject) => {
            this.userService.db.all(
                'SELECT DISTINCT telegram_id FROM users WHERE is_active = 1',
                [],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    async getStats() {
        try {
            const stats = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT 
                        COUNT(DISTINCT user_id) as active_users,
                        COUNT(*) as total_keywords
                    FROM keywords WHERE is_active = 1
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            const foundToday = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT COUNT(*) as found_today
                    FROM found_messages 
                    WHERE DATE(found_at) = DATE('now')
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row?.found_today || 0);
                });
            });

            return {
                ...stats,
                found_today: foundToday,
                monitored_chats: this.monitoredChats.length,
                is_running: this.isRunning
            };

        } catch (error) {
            logger.error('Error getting demo stats:', error);
            return null;
        }
    }
}

module.exports = DemoMonitoring;