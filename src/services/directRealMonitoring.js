const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { Api } = require('telegram/tl');
const UserService = require('../database/userService');
const logger = require('../utils/logger');
const readline = require('readline');

class DirectRealMonitoring {
    constructor() {
        this.userService = new UserService();
        this.client = null;
        this.isRunning = false;
        this.botInstance = null;
        
        // –ë–ê–ó–û–í–´–ï –ß–ê–¢–´ (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏)
        this.monitoredChats = [
            'vantor_casino',
            'cpa_podslushano', 
            'ohmyclick_chat',
            'affilchat',
            'BrokerCredlt',
            'rabotaa_onlayn',
            'rabota_chatz',
            'solobuyernotes'
        ];

        this.chatIds = new Map();
        this.lastMessageIds = new Map();
        this.lastMessageTime = 0; // –î–ª—è rate limiting
        this.sentMessages = new Set(); // –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    }

    async start(botInstance) {
        if (this.isRunning) {
            logger.warn('Direct Real Monitoring —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.botInstance = botInstance;
        this.isRunning = true;

        logger.info('üî• –ó–ê–ü–£–°–ö –ü–†–Ø–ú–û–ì–û –†–ï–ê–õ–¨–ù–û–ì–û –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        logger.info('‚ö° –ë–ï–ó –°–ò–ú–£–õ–Ø–¶–ò–ô - –¢–û–õ–¨–ö–û –†–ï–ê–õ–¨–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø!');
        
        try {
            await this.initializeTelegramClient();
            await this.startDirectMonitoring();
            logger.info('‚úÖ –ü–†–Ø–ú–û–ô –†–ï–ê–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!');
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä—è–º–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
            this.isRunning = false;
            throw error;
        }
    }

    async initializeTelegramClient() {
        const apiId = parseInt(process.env.API_ID);
        const apiHash = process.env.API_HASH;
        
        if (!apiId || !apiHash) {
            throw new Error('API_ID –∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
        }

        const session = new StringSession('');
        this.client = new TelegramClient(session, apiId, apiHash, {
            connectionRetries: 5,
        });

        logger.info('üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram User API...');
        console.log('\nüîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê');

        await this.client.start({
            phoneNumber: async () => {
                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });
                
                return new Promise((resolve) => {
                    rl.question('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567): ', (answer) => {
                        rl.close();
                        logger.info(`üì± –ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω: ${answer}`);
                        resolve(answer);
                    });
                });
            },
            password: async () => {
                const rl = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout
                });
                
                return new Promise((resolve) => {
                    rl.question('üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–µ—Å–ª–∏ –µ—Å—Ç—å): ', (answer) => {
                        rl.close();
                        resolve(answer);
                    });
                });
            },
            phoneCode: async () => {
                console.log('\nüí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS/Telegram:');
                const code = await input.text('–ö–æ–¥: ');
                logger.info(`üí¨ –ö–æ–¥ –≤–≤–µ–¥–µ–Ω: ${code}`);
                return code;
            },
            onError: (err) => {
                logger.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
            },
        });

        logger.info('‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram User API!\n');
    }

    async startDirectMonitoring() {
        logger.info('üéØ –ó–ê–ü–£–°–ö –ü–†–Ø–ú–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –†–ï–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô...');
        
        // –ü–û–ö–ê–ó–´–í–ê–ï–ú –°–ü–ò–°–û–ö –ö–ê–ù–ê–õ–û–í –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
        logger.info(`üìã –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${this.monitoredChats.map(c => '@' + c).join(', ')}`);
        logger.info(`üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: ${this.monitoredChats.length}`);
        
        // –û–ë–•–û–î–ò–ú rate limit - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º getEntity!
        // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã
        logger.info('üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤ –±–µ–∑ rate limit...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ (—á–∞—Ç—ã) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const dialogs = await this.client.getDialogs({});
        
        // –ü–û–ö–ê–ó–´–í–ê–ï–ú –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –î–ò–ê–õ–û–ì–ò
        let availableChannels = [];
        for (const dialog of dialogs) {
            const entity = dialog.entity;
            if (entity.username) {
                availableChannels.push('@' + entity.username);
            }
        }
        logger.info(`üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${availableChannels.join(', ')}`);

        for (const dialog of dialogs) {
            const entity = dialog.entity;
            if (entity.username) {
                const username = entity.username.toLowerCase();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                for (const targetChat of this.monitoredChats) {
                    if (username === targetChat.toLowerCase()) {
                        this.chatIds.set(targetChat, entity);
                        logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω —á–∞—Ç @${targetChat} - –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É!`);
                        
                        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–∫–∏ –æ—Ç—Å—á–µ—Ç–∞
                        try {
                            const messages = await this.client.getMessages(entity, { limit: 1 });
                            if (messages.length > 0) {
                                this.lastMessageIds.set(targetChat, messages[0].id);
                            }
                        } catch (err) {
                            logger.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ @${targetChat}`);
                        }
                    }
                }
            }
        }

        // –ü–û–ö–ê–ó–´–í–ê–ï–ú –ö–ê–ö–ò–ï –ö–ê–ù–ê–õ–´ –ù–ï –ù–ê–ô–î–ï–ù–´
        const connectedChats = Array.from(this.chatIds.keys());
        const notFoundChats = this.monitoredChats.filter(chat => !connectedChats.includes(chat));
        if (notFoundChats.length > 0) {
            logger.warn(`‚ö†Ô∏è  –ù–ï –ù–ê–ô–î–ï–ù–´ –∫–∞–Ω–∞–ª—ã: ${notFoundChats.map(c => '@' + c).join(', ')}`);
            logger.warn(`‚ùó –í–æ–∑–º–æ–∂–Ω–æ, —é–∑–µ—Ä –±–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —ç—Ç–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –∏–º—è`);
        }

        if (this.chatIds.size === 0) {
            logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ –≤–∞—à–∏—Ö –¥–∏–∞–ª–æ–≥–∞—Ö!');
            logger.info('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–∏—Ö —á–∞—Ç–∞—Ö:');
            this.monitoredChats.forEach(chat => {
                logger.info(`   ‚Ä¢ @${chat}`);
            });
        } else {
            logger.info(`üéØ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ${this.chatIds.size} —Ä–µ–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω!`);
        }

        // –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.startRealTimeChecking();
    }

    startRealTimeChecking() {
        logger.info('‚ö° –†–ï–ê–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω!');
        logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥
        this.monitoringInterval = setInterval(async () => {
            if (!this.isRunning) return;
            
            await this.checkAllChatsForNewMessages();
        }, 8000);

        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(async () => {
            if (this.isRunning) {
                await this.checkAllChatsForNewMessages();
            }
        }, 3000);
    }

    async checkAllChatsForNewMessages() {
        for (const [chatUsername, chatEntity] of this.chatIds) {
            try {
                await this.checkChatForNewMessages(chatUsername, chatEntity);
            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ @${chatUsername}:`, error.message);
            }
        }
    }

    async checkChatForNewMessages(chatUsername, chatEntity) {
        try {
            const lastId = this.lastMessageIds.get(chatUsername) || 0;
            
            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            const messages = await this.client.getMessages(chatEntity, { 
                limit: 10,
                minId: lastId 
            });

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for (const message of messages.reverse()) {
                if (message.id > lastId && message.message) {
                    logger.info(`üì® –ù–û–í–û–ï –†–ï–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ @${chatUsername}: "${message.message.substring(0, 60)}..."`);
                    
                    await this.processRealMessage(message, chatUsername);
                    this.lastMessageIds.set(chatUsername, message.id);
                }
            }

        } catch (error) {
            if (error.message.includes('wait of')) {
                // –ï—Å–ª–∏ –≤—Å–µ –∂–µ –ø–æ–ø–∞–ª–∏ –Ω–∞ rate limit - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
                logger.warn(`‚è±Ô∏è Rate limit –¥–ª—è @${chatUsername}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É`);
            } else {
                throw error;
            }
        }
    }

    async processRealMessage(message, chatUsername) {
        const messageText = message.message;
        const messageDate = new Date(message.date * 1000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¢–û–õ–¨–ö–û –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await this.checkKeywordsForMessage(messageText, chatUsername, message.id, messageDate);
    }

    async checkKeywordsForMessage(messageText, chatUsername, messageId, messageDate) {
        try {
            const users = await this.getAllActiveUsers();
            
            for (const user of users) {
                const keywords = await this.userService.getUserKeywords(user.telegram_id);
                
                for (const keyword of keywords) {
                    if (this.matchKeyword(messageText, keyword.keyword)) {
                        logger.info(`üéØ –†–ï–ê–õ–¨–ù–ê–Ø –ù–ê–•–û–î–ö–ê! "${keyword.keyword}" –≤ @${chatUsername} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}`);
                        
                        await this.sendRealNotification(user.telegram_id, {
                            keyword: keyword.keyword,
                            message: messageText,
                            chat: chatUsername,
                            messageId: messageId,
                            date: messageDate
                        });

                        await this.saveFoundMessage(user.telegram_id, chatUsername, messageText, keyword.keyword);
                    }
                }
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
        }
    }

    matchKeyword(text, keyword) {
        try {
            const lowerText = text.toLowerCase();
            const lowerKeyword = keyword.toLowerCase();

            if (keyword.includes('\\b') || keyword.includes('[') || keyword.includes('^')) {
                try {
                    const regex = new RegExp(lowerKeyword, 'gi');
                    return regex.test(lowerText);
                } catch (regexError) {
                    return lowerText.includes(lowerKeyword);
                }
            }

            return lowerText.includes(lowerKeyword);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
            return false;
        }
    }

    async sendRealNotification(userId, data) {
        try {
            if (!this.botInstance) return;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            const messageKey = `${userId}_${data.chat}_${data.messageId}`;
            if (this.sentMessages.has(messageKey)) {
                logger.info(`‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω: ${messageKey}`);
                return;
            }

                                // Rate limiting - –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
                    const now = Date.now();
                    const timeSinceLastMessage = now - this.lastMessageTime;
                    const minDelay = 10000; // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            if (timeSinceLastMessage < minDelay) {
                await new Promise(resolve => setTimeout(resolve, minDelay - timeSinceLastMessage));
            }

            const messageText = `üî• –†–ï–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ò–ó –ß–ê–¢–ê! üî•

üéØ <b>–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!</b>

üîë –ö–ª—é—á: <code>${data.keyword}</code>
üí¨ –ß–∞—Ç: @${data.chat}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: 
<pre>${data.message.length > 400 ? data.message.substring(0, 400) + '...' : data.message}</pre>

üîó <a href="https://t.me/${data.chat}/${data.messageId}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>
‚è∞ ${data.date.toLocaleString('ru-RU')}
üÜî –†–µ–∞–ª—å–Ω—ã–π ID: ${data.messageId}

‚úÖ 100% –†–ï–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞!`;

            await this.botInstance.telegram.sendMessage(userId, messageText, {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            });

            this.lastMessageTime = Date.now();
            this.sentMessages.add(messageKey); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
            if (this.sentMessages.size > 1000) {
                this.sentMessages.clear();
            }
            
            logger.info(`‚úÖ –†–ï–ê–õ–¨–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ rate limit - –∂–¥–µ–º –¥–æ–ª—å—à–µ
            if (error.description && error.description.includes('Too Many Requests')) {
                const retryAfter = error.parameters?.retry_after || 60;
                logger.warn(`‚è≥ Rate limit! –ñ–¥–µ–º ${retryAfter} —Å–µ–∫—É–Ω–¥...`);
                await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
            }
        }
    }

    async saveFoundMessage(userId, chatUsername, messageText, keyword) {
        try {
            await new Promise((resolve, reject) => {
                this.userService.db.run(
                    `INSERT INTO found_messages (user_id, chat_username, message_text, keyword_matched, message_url) 
                     VALUES (?, ?, ?, ?, ?)`,
                    [
                        userId, 
                        chatUsername, 
                        messageText,
                        keyword,
                        `https://t.me/${chatUsername}`
                    ],
                    function(err) {
                        if (err) reject(err);
                        else resolve(this.lastID);
                    }
                );
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    async getAllActiveUsers() {
        return new Promise((resolve, reject) => {
            this.userService.db.all(
                'SELECT DISTINCT telegram_id FROM users WHERE is_active = 1',
                [],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    async stop() {
        if (!this.isRunning) return;

        this.isRunning = false;
        
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
        }

        if (this.client) {
            await this.client.disconnect();
        }

        logger.info('üõë –ü–†–Ø–ú–û–ô —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    async getStats() {
        return {
            monitored_chats: this.chatIds.size,
            is_running: this.isRunning,
            mode: 'DIRECT_REAL',
            connected_chats: Array.from(this.chatIds.keys())
        };
    }

    // –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ö–ê–ù–ê–õ–û–í –ò–ó–í–ù–ï (–ò–ó –ê–î–ú–ò–ù–ö–ò!)
    async updateMonitoredChats(chatList) {
        if (chatList && Array.isArray(chatList) && chatList.length > 0) {
            const newChats = chatList.map(ch => ch.replace('@', ''));
            
            // –ù–ê–ô–¢–ò –ù–û–í–´–ï –ö–ê–ù–ê–õ–´ (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ —Å—Ç–∞—Ä–æ–º —Å–ø–∏—Å–∫–µ)
            const newChannels = newChats.filter(chat => !this.monitoredChats.includes(chat));
            
            // –û–ë–ù–û–í–ò–¢–¨ –°–ü–ò–°–û–ö
            this.monitoredChats = newChats;
            logger.info(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: ${this.monitoredChats.map(c => '@' + c).join(', ')}`);
            logger.info(`üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${this.monitoredChats.length}`);
            
            // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø –ö –ù–û–í–´–ú –ö–ê–ù–ê–õ–ê–ú
            if (newChannels.length > 0 && this.isRunning && this.client) {
                logger.info(`üî• –ê–í–¢–û–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –∫ –Ω–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º: ${newChannels.map(c => '@' + c).join(', ')}`);
                await this.connectToNewChannels(newChannels);
            }
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º –ë–ï–ó –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê
    async connectToNewChannels(newChannels) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const dialogs = await this.client.getDialogs({});
            
            for (const newChannel of newChannels) {
                // –ò—â–µ–º –∫–∞–Ω–∞–ª —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
                const dialog = dialogs.find(d => d.entity.username === newChannel);
                
                if (dialog) {
                    const entity = dialog.entity;
                    this.chatIds.set(newChannel, entity.id.value);
                    logger.info(`üî• –ê–í–¢–û–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï: ‚úÖ @${newChannel} –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É!`);
                } else {
                    logger.warn(`üî• –ê–í–¢–û–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï: ‚ö†Ô∏è @${newChannel} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—é–∑–µ—Ä –±–æ—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–∞–Ω–∞–ª–µ)`);
                }
            }
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º:', error);
        }
    }
}

module.exports = DirectRealMonitoring;