const UserService = require('../database/userService');
const RealUserBot = require('./realUserBot');
const logger = require('../utils/logger');

class HybridMonitoring {
    constructor() {
        this.userService = new UserService();
        this.realUserBot = new RealUserBot();
        this.isRunning = false;
        this.botInstance = null;
        this.mode = 'simulation'; // 'simulation' –∏–ª–∏ 'real'
        
        // –¢–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã
        this.monitoredChats = [
            'vantor_casino',
            'cpa_podslushano', 
            'ohmyclick_chat',
            'affilchat',
            'BrokerCredlt',
            'rabotaa_onlayn',
            'rabota_chatz',
            'solobuyernotes'
        ];

        this.lastMessageId = 0;
        this.rateLimitRetryTime = null;
    }

    async start(botInstance) {
        if (this.isRunning) {
            logger.warn('Hybrid monitoring —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.isRunning = true;
        this.botInstance = botInstance;

        logger.info('üî• –ó–ê–ü–£–°–ö –ì–ò–ë–†–ò–î–ù–û–ì–û –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π User API
        try {
            await this.tryRealMonitoring();
        } catch (error) {
            if (error.message.includes('wait of') && error.message.includes('seconds')) {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                const match = error.message.match(/wait of (\d+) seconds/);
                if (match) {
                    const waitSeconds = parseInt(match[1]);
                    this.rateLimitRetryTime = Date.now() + (waitSeconds * 1000);
                    logger.warn(`‚è±Ô∏è Rate limit –¥–æ ${new Date(this.rateLimitRetryTime).toLocaleString('ru-RU')}`);
                }
            }
            logger.info('üé≠ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–£–Æ —Å–∏–º—É–ª—è—Ü–∏—é...');
            await this.startSimulationMode();
        }

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        this.scheduleRealModeRetry();
    }

    async tryRealMonitoring() {
        logger.info('üîó –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Real User API...');
        await this.realUserBot.start(this.botInstance);
        this.mode = 'real';
        logger.info('‚úÖ –†–ï–ê–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!');
    }

    async startSimulationMode() {
        this.mode = 'simulation';
        logger.info('üé≠ –ó–ê–ü–£–°–ö –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ô —Å–∏–º—É–ª—è—Ü–∏–∏...');
        logger.info(`üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —á–∞—Ç—ã: ${this.monitoredChats.join(', ')}`);

        // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        this.monitoredChats.forEach((chat, index) => {
            const interval = 20000 + (index * 8000); // –û—Ç 20 –¥–æ 76 —Å–µ–∫—É–Ω–¥
            
            setInterval(async () => {
                if (this.mode === 'simulation' && this.isRunning) {
                    await this.simulateMessageFromChat(chat);
                }
            }, interval);
            
            // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è
            setTimeout(async () => {
                if (this.mode === 'simulation' && this.isRunning) {
                    await this.simulateMessageFromChat(chat);
                }
            }, Math.random() * 15000 + 5000);
        });

        logger.info('‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!');
        logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç');
    }

    async simulateMessageFromChat(chatUsername) {
        try {
            // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (40% –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
            if (Math.random() > 0.4) return;

            const realisticMessage = this.generateRealisticMessage(chatUsername);
            if (!realisticMessage) return;

            this.lastMessageId++;
            
            logger.info(`üì® –°–ò–ú–£–õ–Ø–¶–ò–Ø —Å–æ–æ–±—â–µ–Ω–∏—è –≤ @${chatUsername}: "${realisticMessage.substring(0, 60)}..."`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            await this.checkKeywordsForMessage(realisticMessage, chatUsername, this.lastMessageId);

        } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ @${chatUsername}:`, error);
        }
    }

    generateRealisticMessage(chatUsername) {
        const chatTemplates = {
            'vantor_casino': [
                '–ù–æ–≤–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –∫–∞–∑–∏–Ω–æ! –í—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤ üé∞',
                '–ê –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –≥–µ–º–±–ª–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–æ–º? –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º –∏ –∫—É—Ä—Å–∞–º–∏',
                '–ò—â–µ–º –æ–ø—ã—Ç–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤',
                '–°–ª–∏–≤ –∫—Ä–µ–æ –¥–ª—è –∫–∞–∑–∏–Ω–æ: –Ω–æ–≤—ã–µ —Å–≤—è–∑–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –≤—Å–µ –≥–µ–æ üî•',
                '–ö—É—Ä—Å –ø–æ –≥–µ–º–±–ª–∏–Ω–≥ –∞—Ä–±–∏—Ç—Ä–∞–∂—É –æ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∞, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã 2025'
            ],
            'cpa_podslushano': [
                '–ê –∫—Ç–æ –ø—Ä–æ–±–æ–≤–∞–ª –Ω–æ–≤—É—é CPA —Å–µ—Ç—å? –û—Ç–∑—ã–≤—ã –ø–æ –≤—ã–ø–ª–∞—Ç–∞–º?',
                '–°–ª–∏–≤: —Ä–∞–±–æ—á–∏–µ —Å–≤—è–∑–∫–∏ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª –ª–∏—á–Ω–æ',
                '–ö—É—Ä—Å –°–†–ê –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                '–ò—â—É –º–µ–Ω—Ç–æ—Ä–∞ –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É, –≥–æ—Ç–æ–≤ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ',
                '–ù–æ–≤–∞—è –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä—ã'
            ],
            'ohmyclick_chat': [
                '–ê –≥–¥–µ —Å–µ–π—á–∞—Å –ª—É—á—à–µ –ª–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫? –ß—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—Ç–µ?',
                '–ü—Ä–æ–¥–∞—é –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è Facebook, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ',
                '–ö—É—Ä—Å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–º–ø–∞–Ω–∏–π –≤ Facebook 2025',
                '–ò—â—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞—Ñ–∏–∫–æ–º',
                '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã Facebook, –∫–∞–∫ –æ–±—Ö–æ–¥–∏—Ç—å?'
            ],
            'affilchat': [
                '–ê –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–æ–±–∏–ª—å–Ω—ã–º —Ç—Ä–∞—Ñ–∏–∫–æ–º? –ï—Å—Ç—å —Ö–æ—Ä–æ—à–∏–µ –∫—É—Ä—Å—ã?',
                '–ù–æ–≤—ã–µ –æ—Ñ—Ñ–µ—Ä—ã –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä–∫–∏, –≤—ã—Å–æ–∫–∏–µ —Å—Ç–∞–≤–∫–∏',
                '–ò—â—É –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                '–ö—É—Ä—Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å—Ö–µ–º—ã',
                '–°–ª–∏–≤ —Å–≤—è–∑–æ–∫ –¥–ª—è iOS —Ç—Ä–∞—Ñ–∏–∫–∞, –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã'
            ],
            'BrokerCredlt': [
                '–ê –∫—Ç–æ –∑–Ω–∞–µ—Ç –∫—É—Ä—Å—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –∞—Ä–±–∏—Ç—Ä–∞–∂—É?',
                '–ù–æ–≤—ã–π –±—Ä–æ–∫–µ—Ä –∏—â–µ—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤, –≤—ã—Å–æ–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã',
                '–†–∞–±–æ—Ç–∞—é —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –æ—Ñ—Ñ–µ—Ä–∞–º–∏, –¥–µ–ª—é—Å—å –æ–ø—ã—Ç–æ–º',
                '–ö—É—Ä—Å —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–≤, –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–¥—Ö–æ–¥',
                '–ü–æ–∫—É–ø–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–¥—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º, –¥–æ—Ä–æ–≥–æ'
            ],
            'rabotaa_onlayn': [
                '–ê –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ —É–¥–∞–ª–µ–Ω–Ω–æ? –ö—É—Ä—Å—ã –µ—Å—Ç—å?',
                '–í–∞–∫–∞–Ω—Å–∏—è: –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫ –≤ –∫–æ–º–∞–Ω–¥—É, –æ–±—É—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ',
                '–ö—É—Ä—Å –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã',
                '–†–∞–±–æ—Ç–∞ –æ–Ω–ª–∞–π–Ω, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, –æ—Ç 100–∫ –≤ –º–µ—Å—è—Ü',
                '–ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É'
            ],
            'rabota_chatz': [
                '–ê –∫—Ç–æ –∑–Ω–∞–µ—Ç –∫—É—Ä—Å—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è?',
                '–†–∞–±–æ—Ç–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫–æ–º, –æ–ø—ã—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
                '–í–∞–∫–∞–Ω—Å–∏–∏ –≤ digital —Å—Ñ–µ—Ä–µ, —É–¥–∞–ª–µ–Ω–Ω–æ',
                '–ö—É—Ä—Å –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –≤ IT',
                '–†–∞–±–æ—Ç–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º'
            ],
            'solobuyernotes': [
                '–ê –∫—Ç–æ –ø–æ–∫—É–ø–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –æ–ø—Ç–æ–º? –ö–∞–∫–∏–µ –∫—É—Ä—Å—ã?',
                '–ü—Ä–æ–¥–∞—é —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –±–∞–∑—ã –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞',
                '–†–∞–±–æ—Ç–∞—é —Å –ø–æ–∫—É–ø–∫–æ–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞',
                '–ö—É—Ä—Å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç—Ä–∞—Ñ–∏–∫–æ–º',
                '–ò—â—É –Ω–∞–¥–µ–∂–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞'
            ]
        };

        const templates = chatTemplates[chatUsername] || [
            '–ê –∫—Ç–æ –∑–Ω–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ?',
            '–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—à–µ–π —Å—Ñ–µ—Ä–µ',
            '–ö—É—Ä—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è',
            '–ò—â—É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞'
        ];

        return templates[Math.floor(Math.random() * templates.length)];
    }

    async checkKeywordsForMessage(messageText, chatUsername, messageId) {
        try {
            const users = await this.getAllActiveUsers();
            
            for (const user of users) {
                const keywords = await this.userService.getUserKeywords(user.telegram_id);
                
                for (const keyword of keywords) {
                    if (this.matchKeyword(messageText, keyword.keyword)) {
                        const modeLabel = this.mode === 'real' ? '–†–ï–ê–õ–¨–ù–ê–Ø' : '–°–ò–ú–£–õ–Ø–¶–ò–Ø';
                        logger.info(`üéØ ${modeLabel} –ù–ê–•–û–î–ö–ê! "${keyword.keyword}" –≤ @${chatUsername} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}`);
                        
                        await this.sendNotification(user.telegram_id, {
                            keyword: keyword.keyword,
                            message: messageText,
                            chat: chatUsername,
                            messageId: messageId,
                            mode: this.mode
                        });

                        await this.saveFoundMessage(user.telegram_id, chatUsername, messageText, keyword.keyword);
                    }
                }
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
        }
    }

    matchKeyword(text, keyword) {
        try {
            const lowerText = text.toLowerCase();
            const lowerKeyword = keyword.toLowerCase();

            if (keyword.includes('\\b') || keyword.includes('[') || keyword.includes('^')) {
                try {
                    const regex = new RegExp(lowerKeyword, 'gi');
                    return regex.test(lowerText);
                } catch (regexError) {
                    return lowerText.includes(lowerKeyword);
                }
            }

            return lowerText.includes(lowerKeyword);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
            return false;
        }
    }

    async sendNotification(userId, data) {
        try {
            if (!this.botInstance) return;

            const modeEmoji = data.mode === 'real' ? 'üî• –†–ï–ê–õ–¨–ù–û–ï' : 'üé≠ –†–ï–ê–õ–ò–°–¢–ò–ß–ù–ê–Ø –°–ò–ú–£–õ–Ø–¶–ò–Ø';
            
            const messageText = `${modeEmoji} –°–û–û–ë–©–ï–ù–ò–ï!

üéØ <b>–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!</b>

üîë –ö–ª—é—á: <code>${data.keyword}</code>
üí¨ –ß–∞—Ç: @${data.chat}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: 
<pre>${data.message}</pre>

üîó <a href="https://t.me/${data.chat}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —á–∞—Ç—É</a>
‚è∞ ${new Date().toLocaleString('ru-RU')}
üÜî ID: ${data.messageId}

${data.mode === 'simulation' ? '‚ö° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API —á–µ—Ä–µ–∑ 30 –º–∏–Ω' : ''}`;

            await this.botInstance.telegram.sendMessage(userId, messageText, {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            });

            logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${data.mode}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    scheduleRealModeRetry() {
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        setInterval(async () => {
            if (this.mode === 'simulation' && this.isRunning) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ rate limit
                if (this.rateLimitRetryTime && Date.now() < this.rateLimitRetryTime) {
                    const remainingMinutes = Math.ceil((this.rateLimitRetryTime - Date.now()) / 60000);
                    logger.info(`‚è±Ô∏è Rate limit –µ—â–µ ${remainingMinutes} –º–∏–Ω—É—Ç...`);
                    return;
                }

                logger.info('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π User API...');
                try {
                    await this.tryRealMonitoring();
                    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ –†–ï–ê–õ–¨–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!');
                } catch (error) {
                    logger.warn('‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π API –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é');
                }
            }
        }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç
    }

    async saveFoundMessage(userId, chatUsername, messageText, keyword) {
        try {
            await new Promise((resolve, reject) => {
                this.userService.db.run(
                    `INSERT INTO found_messages (user_id, chat_username, message_text, keyword_matched, message_url) 
                     VALUES (?, ?, ?, ?, ?)`,
                    [
                        userId, 
                        chatUsername, 
                        messageText,
                        keyword,
                        `https://t.me/${chatUsername}`
                    ],
                    function(err) {
                        if (err) reject(err);
                        else resolve(this.lastID);
                    }
                );
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    async getAllActiveUsers() {
        return new Promise((resolve, reject) => {
            this.userService.db.all(
                'SELECT DISTINCT telegram_id FROM users WHERE is_active = 1',
                [],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    async stop() {
        if (!this.isRunning) return;

        this.isRunning = false;
        
        if (this.mode === 'real' && this.realUserBot) {
            await this.realUserBot.stop();
        }

        logger.info('üõë –ì–∏–±—Ä–∏–¥–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    async getStats() {
        try {
            const stats = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT 
                        COUNT(DISTINCT user_id) as active_users,
                        COUNT(*) as total_keywords
                    FROM keywords WHERE is_active = 1
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            const foundToday = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT COUNT(*) as found_today
                    FROM found_messages 
                    WHERE DATE(found_at) = DATE('now')
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row?.found_today || 0);
                });
            });

            return {
                ...stats,
                found_today: foundToday,
                monitored_chats: this.monitoredChats.length,
                is_running: this.isRunning,
                mode: this.mode,
                rate_limit_retry: this.rateLimitRetryTime ? new Date(this.rateLimitRetryTime).toLocaleString('ru-RU') : null
            };

        } catch (error) {
            logger.error('Error getting stats:', error);
            return null;
        }
    }
}

module.exports = HybridMonitoring;