const { TelegramApi } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { Api } = require('telegram/tl');
const UserService = require('../database/userService');
const logger = require('../utils/logger');
const readline = require('readline');

class RealMonitoring {
    constructor() {
        this.client = null;
        this.isConnected = false;
        this.isRunning = false;
        this.botInstance = null;
        this.userService = new UserService();
        
        // –¢–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.monitoredChats = [
            'vantor_casino',
            'cpa_podslushano', 
            'ohmyclick_chat',
            'affilchat',
            'BrokerCredlt',
            'rabotaa_onlayn',
            'rabota_chatz',
            'solobuyernotes'
        ];
    }

    // –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ User API
    async start(botInstance) {
        if (this.isRunning) {
            logger.warn('Real monitoring already running');
            return;
        }

        this.isRunning = true;
        this.botInstance = botInstance;
        
        logger.info('üöÄ –ó–∞–ø—É—Å–∫ –†–ï–ê–õ–¨–ù–û–ì–û –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Telegram User API...');

        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
            await this.initializeTelegramClient();
            
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç–∞–º
            await this.connectToChats();
            
            // –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await this.startMessageListener();
            
            logger.info('‚úÖ –†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram API, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            await this.showSetupInstructions();
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
    async initializeTelegramClient() {
        try {
            logger.info('üîß –°–æ–∑–¥–∞–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞...');
            
            const session = new StringSession(''); // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Å–µ—Å—Å–∏—è
            
            this.client = new TelegramApi(
                parseInt(process.env.API_ID),
                process.env.API_HASH,
                {
                    session: session,
                    deviceModel: 'KeyChat Monitor',
                    systemVersion: '1.0.0',
                    appVersion: '1.0.0',
                    langCode: 'ru',
                    systemLangCode: 'ru'
                }
            );

            logger.info('üìû –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');

            // –ó–∞–ø—É—Å–∫ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            await this.client.start({
                phoneNumber: async () => {
                    console.log('\nüì± –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∞—à–µ–º—É Telegram –∞–∫–∫–∞—É–Ω—Ç—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
                    return await this.askPhoneNumber();
                },
                password: async () => {
                    console.log('\nüîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)');
                    return await this.askPassword();
                },
                phoneCode: async () => {
                    console.log('\nüí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS');
                    return await this.askPhoneCode();
                },
                onError: (err) => {
                    logger.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
                    throw err;
                },
            });

            this.isConnected = true;
            logger.info('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞:', error);
            throw error;
        }
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á–∞—Ç–∞–º
    async connectToChats() {
        logger.info('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã–º —á–∞—Ç–∞–º...');
        
        for (const chatUsername of this.monitoredChats) {
            try {
                const entity = await this.client.getEntity(chatUsername);
                logger.info(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ @${chatUsername}: ${entity.title}`);
            } catch (error) {
                logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ @${chatUsername}:`, error.message);
            }
        }
    }

    // –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async startMessageListener() {
        logger.info('üëÇ –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.client.addEventHandler(async (event) => {
            if (event.className === 'UpdateNewMessage') {
                await this.handleNewMessage(event);
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    async handleNewMessage(event) {
        try {
            const message = event.message;
            if (!message?.message) return;

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            const chat = await this.client.getEntity(message.peerId);
            const chatUsername = chat.username;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–Ω–∏—Ç–æ—Ä–∏–º –ª–∏ –º—ã —ç—Ç–æ—Ç —á–∞—Ç
            if (!this.monitoredChats.includes(chatUsername)) return;

            logger.info(`üì® –ù–æ–≤–æ–µ –†–ï–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ @${chatUsername}: ${message.message.substring(0, 50)}...`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            await this.checkKeywords(message.message, chatUsername, message);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏)
    async checkKeywords(messageText, chatUsername, originalMessage) {
        try {
            const users = await this.getAllActiveUsers();
            
            for (const user of users) {
                const keywords = await this.userService.getUserKeywords(user.telegram_id);
                
                for (const keyword of keywords) {
                    if (this.matchKeyword(messageText, keyword.keyword)) {
                        logger.info(`üéØ –†–ï–ê–õ–¨–ù–ê–Ø –ù–ê–•–û–î–ö–ê! "${keyword.keyword}" –≤ @${chatUsername} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}`);
                        
                        await this.sendNotification(user.telegram_id, {
                            keyword: keyword.keyword,
                            message: messageText,
                            chat: chatUsername,
                            messageId: originalMessage.id,
                            isReal: true
                        });

                        await this.saveFoundMessage(user.telegram_id, chatUsername, messageText, keyword.keyword);
                    }
                }
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    matchKeyword(text, keyword) {
        try {
            const lowerText = text.toLowerCase();
            const lowerKeyword = keyword.toLowerCase();

            if (keyword.includes('\\b') || keyword.includes('[') || keyword.includes('^')) {
                try {
                    const regex = new RegExp(lowerKeyword, 'gi');
                    return regex.test(lowerText);
                } catch (regexError) {
                    return lowerText.includes(lowerKeyword);
                }
            }

            return lowerText.includes(lowerKeyword);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
            return false;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ—Ç–º–µ—Ç–∫–æ–π –æ —Ä–µ–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    async sendNotification(userId, data) {
        try {
            if (!this.botInstance) return;

            const realBadge = data.isReal ? 'üî• –†–ï–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï! üî•' : '';
            const messageText = `${realBadge}
üéØ *–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!*

üîë –ö–ª—é—á: \`${data.keyword}\`
üí¨ –ß–∞—Ç: @${data.chat}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: 
\`\`\`
${data.message.length > 300 ? data.message.substring(0, 300) + '...' : data.message}
\`\`\`

üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é](https://t.me/${data.chat}/${data.messageId})
‚è∞ ${new Date().toLocaleString('ru-RU')}`;

            await this.botInstance.telegram.sendMessage(userId, messageText, {
                parse_mode: 'Markdown',
                disable_web_page_preview: true
            });

            logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async saveFoundMessage(userId, chatUsername, messageText, keyword) {
        try {
            await new Promise((resolve, reject) => {
                this.userService.db.run(
                    `INSERT INTO found_messages (user_id, chat_username, message_text, keyword_matched, message_url) 
                     VALUES (?, ?, ?, ?, ?)`,
                    [
                        userId, 
                        chatUsername, 
                        messageText.substring(0, 1000),
                        keyword,
                        `https://t.me/${chatUsername}`
                    ],
                    function(err) {
                        if (err) reject(err);
                        else resolve(this.lastID);
                    }
                );
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    async getAllActiveUsers() {
        return new Promise((resolve, reject) => {
            this.userService.db.all(
                'SELECT DISTINCT telegram_id FROM users WHERE is_active = 1',
                [],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    async askPhoneNumber() {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        return new Promise((resolve) => {
            rl.question('üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä +79991234567): ', (answer) => {
                rl.close();
                resolve(answer);
            });
        });
    }

    async askPassword() {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        return new Promise((resolve) => {
            rl.question('üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å): ', (answer) => {
                rl.close();
                resolve(answer);
            });
        });
    }

    async askPhoneCode() {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        return new Promise((resolve) => {
            rl.question('üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS: ', (answer) => {
                rl.close();
                resolve(answer);
            });
        });
    }

    // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async showSetupInstructions() {
        logger.info(`
üîß –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –†–ï–ê–õ–¨–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:

1. üì± –ü–æ–ª—É—á–∏ API_ID –∏ API_HASH:
   - –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ https://my.telegram.org
   - –í–æ–π–¥–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç
   - –°–æ–∑–¥–∞–π –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
   - –°–∫–æ–ø–∏—Ä—É–π API_ID –∏ API_HASH –≤ .env —Ñ–∞–π–ª

2. ü§ñ –ó–∞–ø—É—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:
   - –í—ã–ø–æ–ª–Ω–∏: npm run real-monitoring
   - –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
   - –í–≤–µ–¥–∏ –∫–æ–¥ –∏–∑ SMS
   - –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫–æ –≤—Å–µ–º —á–∞—Ç–∞–º

3. üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:
   - –†–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
   - –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞—Ö–æ–¥–∫–∞—Ö
   - –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

–°–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –î–ï–ú–û-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        `);
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    async stop() {
        if (!this.isRunning) return;

        this.isRunning = false;
        
        if (this.client && this.isConnected) {
            await this.client.disconnect();
            this.isConnected = false;
        }
        
        logger.info('üõë –†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

module.exports = RealMonitoring;