const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const { Api } = require('telegram/tl');
const UserService = require('../database/userService');
const logger = require('../utils/logger');
const input = require('input');

class RealUserBot {
    constructor() {
        this.userService = new UserService();
        this.client = null;
        this.isRunning = false;
        this.botInstance = null;
        
        // –¢–í–û–ò –†–ï–ê–õ–¨–ù–´–ï –ß–ê–¢–´!
        this.monitoredChats = [
            'vantor_casino',
            'cpa_podslushano', 
            'ohmyclick_chat',
            'affilchat',
            'BrokerCredlt',
            'rabotaa_onlayn',
            'rabota_chatz',
            'solobuyernotes'
        ];

        this.chatEntities = new Map();
        this.lastMessageIds = new Map();
    }

    async start(botInstance) {
        if (this.isRunning) {
            logger.warn('Real User Bot —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }

        this.botInstance = botInstance;
        this.isRunning = true;

        logger.info('üî• –ó–ê–ü–£–°–ö –ù–ê–°–¢–û–Ø–©–ï–ì–û User API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        
        try {
            await this.initializeTelegramClient();
            await this.setupChatMonitoring();
            logger.info('‚úÖ –†–ï–ê–õ–¨–ù–´–ô User API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω!');
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ User API:', error);
            this.isRunning = false;
            throw error;
        }
    }

    async initializeTelegramClient() {
        const apiId = parseInt(process.env.API_ID);
        const apiHash = process.env.API_HASH;
        
        if (!apiId || !apiHash) {
            throw new Error('API_ID –∏ API_HASH –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ');
        }

        const session = new StringSession('');
        this.client = new TelegramClient(session, apiId, apiHash, {
            connectionRetries: 5,
        });

        logger.info('üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram User API...');
        console.log('\nüîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –í TELEGRAM');
        console.log('–°–µ–π—á–∞—Å –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram');

        await this.client.start({
            phoneNumber: async () => {
                console.log('\nüì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
                const phone = await input.text('–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, +79123456789): ');
                logger.info(`üì± –í–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä: ${phone}`);
                return phone;
            },
            password: async () => {
                console.log('\nüîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
                const pwd = await input.text('–ü–∞—Ä–æ–ª—å 2FA: ');
                logger.info('üîê –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω');
                return pwd;
            },
            phoneCode: async () => {
                console.log('\nüí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS/Telegram:');
                const code = await input.text('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ');
                logger.info(`üí¨ –ö–æ–¥ –≤–≤–µ–¥–µ–Ω: ${code}`);
                return code;
            },
            onError: (err) => {
                logger.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
            },
        });

        logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram User API!');
        console.log('‚úÖ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!\n');
    }

    async setupChatMonitoring() {
        logger.info('üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç–æ–≤...');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–∞—Ö
        for (const chatUsername of this.monitoredChats) {
            try {
                const chatEntity = await this.client.getEntity(chatUsername);
                this.chatEntities.set(chatUsername, chatEntity);
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
                const messages = await this.client.getMessages(chatEntity, { limit: 1 });
                if (messages.length > 0) {
                    this.lastMessageIds.set(chatUsername, messages[0].id);
                }
                
                logger.info(`‚úÖ –ß–∞—Ç @${chatUsername} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥`);
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ @${chatUsername}:`, error.message);
            }
        }

        // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.startMessageMonitoring();
    }

    startMessageMonitoring() {
        logger.info('üéØ –ó–ê–ü–£–°–ö –†–ï–ê–õ–¨–ù–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –°–û–û–ë–©–ï–ù–ò–ô...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        this.monitoringInterval = setInterval(async () => {
            if (!this.isRunning) return;
            
            await this.checkForNewMessages();
        }, 10000);

        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(async () => {
            if (this.isRunning) {
                await this.checkForNewMessages();
            }
        }, 5000);

        logger.info('‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥');
    }

    async checkForNewMessages() {
        for (const [chatUsername, chatEntity] of this.chatEntities) {
            try {
                const lastId = this.lastMessageIds.get(chatUsername) || 0;
                
                // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                const messages = await this.client.getMessages(chatEntity, { 
                    limit: 20,
                    minId: lastId 
                });

                for (const message of messages.reverse()) {
                    if (message.id > lastId && message.message) {
                        await this.processNewMessage(message, chatUsername);
                        this.lastMessageIds.set(chatUsername, message.id);
                    }
                }

            } catch (error) {
                logger.error(`–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ @${chatUsername}:`, error.message);
            }
        }
    }

    async processNewMessage(message, chatUsername) {
        const messageText = message.message;
        const messageDate = new Date(message.date * 1000);
        
        logger.info(`üì® –ù–û–í–û–ï –†–ï–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ @${chatUsername}: "${messageText.substring(0, 50)}..."`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        await this.checkKeywordsForMessage(messageText, chatUsername, message.id, messageDate);
    }

    async checkKeywordsForMessage(messageText, chatUsername, messageId, messageDate) {
        try {
            const users = await this.getAllActiveUsers();
            
            for (const user of users) {
                const keywords = await this.userService.getUserKeywords(user.telegram_id);
                
                for (const keyword of keywords) {
                    if (this.matchKeyword(messageText, keyword.keyword)) {
                        logger.info(`üéØ –†–ï–ê–õ–¨–ù–ê–Ø –ù–ê–•–û–î–ö–ê! "${keyword.keyword}" –≤ @${chatUsername} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id}`);
                        
                        await this.sendNotification(user.telegram_id, {
                            keyword: keyword.keyword,
                            message: messageText,
                            chat: chatUsername,
                            messageId: messageId,
                            date: messageDate
                        });

                        await this.saveFoundMessage(user.telegram_id, chatUsername, messageText, keyword.keyword);
                    }
                }
            }

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
        }
    }

    matchKeyword(text, keyword) {
        try {
            const lowerText = text.toLowerCase();
            const lowerKeyword = keyword.toLowerCase();

            if (keyword.includes('\\b') || keyword.includes('[') || keyword.includes('^')) {
                try {
                    const regex = new RegExp(lowerKeyword, 'gi');
                    return regex.test(lowerText);
                } catch (regexError) {
                    return lowerText.includes(lowerKeyword);
                }
            }

            return lowerText.includes(lowerKeyword);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', error);
            return false;
        }
    }

    async sendNotification(userId, data) {
        try {
            if (!this.botInstance) return;

            const messageText = `üî• –†–ï–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ò–ó –ß–ê–¢–ê! üî•

üéØ <b>–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!</b>

üîë –ö–ª—é—á: <code>${data.keyword}</code>
üí¨ –ß–∞—Ç: @${data.chat}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: 
<pre>${data.message.length > 300 ? data.message.substring(0, 300) + '...' : data.message}</pre>

üîó <a href="https://t.me/${data.chat}/${data.messageId}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é</a>
‚è∞ ${data.date.toLocaleString('ru-RU')}
üÜî ID: ${data.messageId}`;

            await this.botInstance.telegram.sendMessage(userId, messageText, {
                parse_mode: 'HTML',
                disable_web_page_preview: true
            });

            logger.info(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –†–ï–ê–õ–¨–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        }
    }

    async saveFoundMessage(userId, chatUsername, messageText, keyword) {
        try {
            await new Promise((resolve, reject) => {
                this.userService.db.run(
                    `INSERT INTO found_messages (user_id, chat_username, message_text, keyword_matched, message_url) 
                     VALUES (?, ?, ?, ?, ?)`,
                    [
                        userId, 
                        chatUsername, 
                        messageText,
                        keyword,
                        `https://t.me/${chatUsername}`
                    ],
                    function(err) {
                        if (err) reject(err);
                        else resolve(this.lastID);
                    }
                );
            });

        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    async getAllActiveUsers() {
        return new Promise((resolve, reject) => {
            this.userService.db.all(
                'SELECT DISTINCT telegram_id FROM users WHERE is_active = 1',
                [],
                (err, rows) => {
                    if (err) reject(err);
                    else resolve(rows || []);
                }
            );
        });
    }

    async stop() {
        if (!this.isRunning) return;

        this.isRunning = false;
        
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
        }

        if (this.client) {
            await this.client.disconnect();
        }

        logger.info('üõë –†–µ–∞–ª—å–Ω—ã–π User API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }

    async getStats() {
        try {
            const stats = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT 
                        COUNT(DISTINCT user_id) as active_users,
                        COUNT(*) as total_keywords
                    FROM keywords WHERE is_active = 1
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row);
                });
            });

            const foundToday = await new Promise((resolve, reject) => {
                this.userService.db.get(`
                    SELECT COUNT(*) as found_today
                    FROM found_messages 
                    WHERE DATE(found_at) = DATE('now')
                `, [], (err, row) => {
                    if (err) reject(err);
                    else resolve(row?.found_today || 0);
                });
            });

            return {
                ...stats,
                found_today: foundToday,
                monitored_chats: this.monitoredChats.length,
                is_running: this.isRunning,
                connected_chats: this.chatEntities.size
            };

        } catch (error) {
            logger.error('Error getting stats:', error);
            return null;
        }
    }
}

module.exports = RealUserBot;