const { chatsKeyboard, backToMainKeyboard, addChatsKeyboard } = require('../keyboards/mainKeyboard');
const UserService = require('../database/userService');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const chatStates = new Map();

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ ID (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–î)
const CATEGORY_MAP = {
    '–ê—Ä–±–∏—Ç—Ä–∞–∂ —Ç—Ä–∞—Ñ–∏–∫–∞': 1,
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥/–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞': 2
};

async function handleChatsMenu(ctx) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–Ω–∫—Ç –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —á–∞—Ç—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ:', chatsKeyboard());
}

async function handleCategorySelection(ctx, categoryName) {
    const userService = new UserService();
    
    try {
        const categoryId = CATEGORY_MAP[categoryName];
        
        if (!categoryId) {
            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —á–∞—Ç–æ–≤.');
            return;
        }

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const subscription = await userService.subscribeToCategory(ctx.from.id, categoryId);
        
        const message = `‚úÖ *–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.*

–£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã. –ï—Å–ª–∏ —Å–ª–æ–≤–∞ —É–∂–µ —É–∫–∞–∑–∞–Ω—ã, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω. 

–°–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è –ø–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: *${categoryName}*
${subscription.expires_at ? `‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(subscription.expires_at).toLocaleString('ru-RU')}` : ''}`;

        await ctx.reply(message, {
            parse_mode: 'Markdown',
            ...backToMainKeyboard()
        });

    } catch (error) {
        console.error('Error subscribing to category:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
        userService.close();
    }
}

async function handleAddOwnChats(ctx) {
    const userService = new UserService();
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await userService.getOrCreateUser(ctx.from.id);
        
        if (user.subscription_type === 'free') {
            const message = `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏. 

–í—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤—ã–º–∏ —Å–±–æ—Ä–∫–∞–º–∏ —á–∞—Ç–æ–≤.`;

            await ctx.reply(message, backToMainKeyboard());
            return;
        }

        // –î–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const message = `‚úÖ –£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. 

–î–∞–Ω–Ω—ã–µ —á–∞—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é, –ø–æ—ç—Ç–æ–º—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É. 

–ï—Å–ª–∏ —á–∞—Ç, –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —Å–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω, –º—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.`;

        await ctx.reply(message, addChatsKeyboard());

    } catch (error) {
        console.error('Error in add own chats:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
        userService.close();
    }
}

async function handleAddChatsList(ctx) {
    chatStates.set(ctx.from.id, 'waiting_for_chats_list');
    
    const message = `üìù *–£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤*, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ.

*–§–æ—Ä–º–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è:*
‚Ä¢ @chatusername
‚Ä¢ https://t.me/chatusername  
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞

*–ü—Ä–∏–º–µ—Ä:*
@arbitragechat
https://t.me/marketingpro
–ö—Ä–∏–ø—Ç–æ-—Ç—Ä–µ–π–¥–∏–Ω–≥ —á–∞—Ç`;

    await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...backToMainKeyboard()
    });
}

async function handleChatsListInput(ctx) {
    const userState = chatStates.get(ctx.from.id);
    
    if (userState !== 'waiting_for_chats_list') {
        return;
    }

    const userService = new UserService();
    
    try {
        const inputText = ctx.message.text.trim();
        const chatLines = inputText.split('\n').filter(line => line.trim().length > 0);
        
        if (chatLines.length === 0) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç—ã –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç
        const processedChats = [];
        for (const line of chatLines) {
            const chatData = parseChatLine(line.trim());
            if (chatData) {
                try {
                    await userService.addUserChat(ctx.from.id, chatData);
                    processedChats.push(chatData);
                } catch (error) {
                    console.error('Error adding chat:', chatData, error);
                }
            }
        }

        if (processedChats.length > 0) {
            let successMessage = `‚úÖ *–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–∞–±–æ—Ç—É.*\n\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: ${processedChats.length}\n\n`;
            
            processedChats.forEach((chat, index) => {
                successMessage += `${index + 1}. ${chat.title || chat.username}\n`;
            });

            successMessage += '\n‚è≥ –ß–∞—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —á–∞—Å–æ–≤.';

            await ctx.reply(successMessage, {
                parse_mode: 'Markdown',
                ...backToMainKeyboard()
            });
        } else {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        chatStates.delete(ctx.from.id);

    } catch (error) {
        console.error('Error processing chats list:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤.');
        chatStates.delete(ctx.from.id);
    } finally {
        userService.close();
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ —á–∞—Ç–∞
function parseChatLine(line) {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
    line = line.trim();
    
    if (line.startsWith('@')) {
        return {
            username: line.substring(1),
            title: line
        };
    } else if (line.includes('t.me/')) {
        const match = line.match(/t\.me\/([^\/\s]+)/);
        if (match) {
            return {
                username: match[1],
                title: line
            };
        }
    } else {
        // –û–±—ã—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
        return {
            username: null,
            title: line
        };
    }
    
    return null;
}

module.exports = {
    handleChatsMenu,
    handleCategorySelection,
    handleAddOwnChats,
    handleAddChatsList,
    handleChatsListInput,
    chatStates,
    CATEGORY_MAP
};