const { keysKeyboard, backToMainKeyboard, keywordActionsInline, confirmKeywordInline } = require('../keyboards/mainKeyboard');
const UserService = require('../database/userService');

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userStates = new Map();

async function handleKeysMenu(ctx) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—É–Ω–∫—Ç:', keysKeyboard());
}

async function handleMyKeys(ctx) {
    const userService = new UserService();
    
    try {
        const keywords = await userService.getUserKeywords(ctx.from.id);
        
        if (keywords.length === 0) {
            await ctx.reply(
                '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.',
                keysKeyboard()
            );
            return;
        }

        let message = 'üìù *–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:*\n\n';
        keywords.forEach((keyword, index) => {
            message += `${index + 1}. \`${keyword.keyword}\`\n`;
        });

        message += '\nüí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ inline –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞.';

        await ctx.reply(message, { 
            parse_mode: 'Markdown',
            ...keysKeyboard()
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
        for (const keyword of keywords) {
            await ctx.reply(
                `üîë \`${keyword.keyword}\``,
                {
                    parse_mode: 'Markdown',
                    ...keywordActionsInline(keyword.id)
                }
            );
        }

    } catch (error) {
        console.error('Error getting keywords:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.');
    } finally {
        userService.close();
    }
}

async function handleAddKey(ctx) {
    userStates.set(ctx.from.id, 'waiting_for_keywords');
    
    const instructionMessage = `üìù *–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ*, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å (—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞ –≤ —Å—Ç–æ–ª–±–∏–∫).

*–ù–∞–ø—Ä–∏–º–µ—Ä:*
–º–∞—à–∏–Ω–∞
–¥–µ—Ä–µ–≤–æ
–æ–±–ª–∞–∫–æ

–ù–∞—à –±–æ—Ç –∏—â–µ—Ç —Å–ª–æ–≤–∞ –∫–æ—Ä–Ω—é, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã:

‚Ä¢ \`\\b–¥–æ—Ä–æ–≥–∞\\b\` - –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–æ —Å–ª–æ–≤–æ
‚Ä¢ \`—Å–ª–∏–≤–∞[–∞,–µ]\` - –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–ª–æ–≤–∞: —Å–ª–∏–≤–∞, —Å–ª–∏–≤–µ  
‚Ä¢ \`–±–µ—Ä–µ–≥[^–∞]\` - –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å–ª–æ–≤–æ + –≤—Å–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—Ä–æ–º–µ –∞`;

    await ctx.reply(instructionMessage, {
        parse_mode: 'Markdown',
        ...backToMainKeyboard()
    });
}

async function handleKeywordInput(ctx) {
    const userState = userStates.get(ctx.from.id);
    
    if (userState !== 'waiting_for_keywords') {
        return;
    }

    const userService = new UserService();
    
    try {
        const inputText = ctx.message.text.trim();
        const keywords = inputText.split('\n').filter(k => k.trim().length > 0);
        
        if (keywords.length === 0) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        const addedKeywords = [];
        for (const keyword of keywords) {
            try {
                const result = await userService.addKeyword(ctx.from.id, keyword);
                addedKeywords.push(result.keyword);
            } catch (error) {
                console.error('Error adding keyword:', keyword, error);
            }
        }

        if (addedKeywords.length > 0) {
            let successMessage = `‚úÖ *–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å*\n\n–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ª–æ–≤: ${addedKeywords.length}\n\n`;
            addedKeywords.forEach((keyword, index) => {
                successMessage += `${index + 1}. \`${keyword}\`\n`;
            });

            await ctx.reply(successMessage, {
                parse_mode: 'Markdown',
                ...keysKeyboard()
            });
        } else {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates.delete(ctx.from.id);

    } catch (error) {
        console.error('Error processing keywords:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.');
        userStates.delete(ctx.from.id);
    } finally {
        userService.close();
    }
}

async function handleDeleteKeyword(ctx) {
    const callbackData = ctx.callbackQuery.data;
    const keywordId = callbackData.split('_')[2];
    
    const userService = new UserService();
    
    try {
        const success = await userService.removeKeyword(ctx.from.id, keywordId);
        
        if (success) {
            await ctx.editMessageText('‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ');
            await ctx.answerCbQuery('–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ');
        } else {
            await ctx.answerCbQuery('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ');
        }
    } catch (error) {
        console.error('Error deleting keyword:', error);
        await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
        userService.close();
    }
}

module.exports = {
    handleKeysMenu,
    handleMyKeys, 
    handleAddKey,
    handleKeywordInput,
    handleDeleteKeyword,
    userStates
};