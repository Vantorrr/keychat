require('dotenv').config();
const { Telegraf } = require('telegraf');
const { initDatabase } = require('./database/init');
const MonitoringService = require('./services/monitoringService');
const logger = require('./utils/logger');

// –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const { handleStart } = require('./handlers/startHandler');
const { 
    handleKeysMenu, 
    handleMyKeys, 
    handleAddKey, 
    handleKeywordInput, 
    handleDeleteKeyword,
    userStates: keywordStates
} = require('./handlers/keywordHandlers');
const { 
    handleChatsMenu, 
    handleCategorySelection, 
    handleAddOwnChats, 
    handleAddChatsList, 
    handleChatsListInput,
    chatStates,
    CATEGORY_MAP
} = require('./handlers/chatHandlers');
const { handlePayment } = require('./handlers/paymentHandler');
const { handleReferralProgram, handleCopyReferralLink } = require('./handlers/referralHandler');
const { handleSupport } = require('./handlers/supportHandler');
const AdminHandler = require('./handlers/adminHandler');

// –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä
const { mainKeyboard } = require('./keyboards/mainKeyboard');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const monitoringService = new MonitoringService();

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω-—Ö–µ–Ω–¥–ª–µ—Ä–∞
const adminHandler = new AdminHandler();

// –î–µ–ª–∞–µ–º adminHandler –∏ monitoringService –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
global.adminHandler = adminHandler;
global.monitoringService = monitoringService;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initBot() {
    try {
        await initDatabase();
        logger.info('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        await monitoringService.start(bot);
        logger.info('‚úÖ –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω');
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
    }
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
bot.use(async (ctx, next) => {
    const start = Date.now();
    const userId = ctx.from?.id;
    const username = ctx.from?.username;
    const messageText = ctx.message?.text || ctx.callbackQuery?.data || 'N/A';
    
    logger.info(`üì® User ${userId} (@${username}): ${messageText}`);
    
    try {
        await next();
    } catch (error) {
        logger.error('Error processing update:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    const responseTime = Date.now() - start;
    logger.debug(`‚ö° Response time: ${responseTime}ms`);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(handleStart);

// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.command('admin', (ctx) => adminHandler.handleAdminCommand(ctx));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.hears('üîë –ö–ª—é—á–∏', handleKeysMenu);
bot.hears('üí¨ –ß–∞—Ç—ã', handleChatsMenu);
bot.hears('üí≥ –û–ø–ª–∞—Ç–∞', handlePayment);
bot.hears('ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', handleReferralProgram);
bot.hears('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞', handleSupport);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∫–ª—é—á–µ–π
bot.hears('üìù –ú–æ–∏ –∫–ª—é—á–∏', handleMyKeys);
bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á', handleAddKey);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–∞—Ç–æ–≤
Object.keys(CATEGORY_MAP).forEach(categoryName => {
    const emoji = {
        '–ê—Ä–±–∏—Ç—Ä–∞–∂ —Ç—Ä–∞—Ñ–∏–∫–∞': 'üìà',
        '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥/–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞': 'üìä'
    };
    
    bot.hears(`${emoji[categoryName]} ${categoryName}`, (ctx) => {
        handleCategorySelection(ctx, categoryName);
    });
});

bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —á–∞—Ç—ã', handleAddOwnChats);
bot.hears('üìù –î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤', handleAddChatsList);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
bot.hears('üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É', handleCopyReferralLink);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
bot.hears(['üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º', 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É'], async (ctx) => {
    const contactMessage = `üìû –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

üë§ Telegram: @noname_par

üíå –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º:
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏
‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∏–¥–µ–π  
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞

‚ö° –û—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!`;
    
    await ctx.reply(contactMessage);
});

// –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', (ctx) => adminHandler.handleStats(ctx));
bot.hears('üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏', (ctx) => adminHandler.handleChannels(ctx));
bot.hears('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', (ctx) => adminHandler.handleUsers(ctx));
bot.hears('‚öôÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', (ctx) => adminHandler.handleStats(ctx));
bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', (ctx) => adminHandler.handleAddChannel(ctx));
bot.hears('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫', (ctx) => adminHandler.handleRestart(ctx));
bot.hears('üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', (ctx) => adminHandler.handleAdminCommand(ctx));
bot.hears('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', (ctx) => adminHandler.handleChannels(ctx));
bot.hears(['üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', '‚ö° –í–∫–ª/–í—ã–∫–ª –∫–∞–Ω–∞–ª'], (ctx) => {
    ctx.reply('üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.', adminHandler.getAdminKeyboard());
});
bot.hears('‚öôÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', (ctx) => adminHandler.handleStats(ctx));
bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', (ctx) => adminHandler.handleAddChannel(ctx));
bot.hears('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫', (ctx) => adminHandler.handleRestart(ctx));
bot.hears('üè† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', (ctx) => adminHandler.handleAdminCommand(ctx));
bot.hears('üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', (ctx) => adminHandler.handleChannels(ctx));

// –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
bot.hears('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keywordStates.delete(ctx.from.id);
    chatStates.delete(ctx.from.id);
    
    const mainMenuMessage = `üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é KeyChat

ü§ñ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π

üìä –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Ö–æ–¥–∫–∞—Ö

üîß –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`;

    await ctx.replyWithPhoto('https://i.ibb.co/LTbkYMh/D4-E3-FC83-22-BA-465-F-BC11-A1-CD3-A509-D64.jpg', {
        caption: mainMenuMessage,
        ...mainKeyboard()
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (inline –∫–Ω–æ–ø–∫–∏)
bot.action(/delete_keyword_(\d+)/, handleDeleteKeyword);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
bot.action(/category_(.+)/, (ctx) => {
    const category = ctx.match[1];
    adminHandler.handleCategorySelection(ctx, category);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
bot.action('cancel_adding', (ctx) => {
    adminHandler.handleCancelAdding(ctx);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —á–∞—Ç–æ–≤)
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const text = ctx.message.text;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if (adminHandler.adminStates && adminHandler.adminStates.has(userId)) {
        const adminState = adminHandler.adminStates.get(userId);
        if (adminState === 'adding_channel') {
            await adminHandler.handleChannelInput(ctx);
            return;
        }
        if (adminState === 'confirming_restart') {
            await adminHandler.handleRestartConfirm(ctx);
            return;
        }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (keywordStates.get(userId) === 'waiting_for_keywords') {
        await handleKeywordInput(ctx);
        return;
    }
    
    if (chatStates.get(userId) === 'waiting_for_chats_list') {
        await handleChatsListInput(ctx);
        return;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (!text.startsWith('/')) {
        await ctx.reply(
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.',
            mainKeyboard()
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error('‚ùå Bot error:', err);
    console.error('Context:', ctx.update);
});

// Graceful shutdown
process.once('SIGINT', async () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    await monitoringService.stop();
    bot.stop('SIGINT');
    process.exit(0);
});

process.once('SIGTERM', async () => {
    logger.info('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
    await monitoringService.stop();
    bot.stop('SIGTERM');
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
    try {
        await initBot();
        
        logger.info('üöÄ –ó–∞–ø—É—Å–∫ KeyChat –±–æ—Ç–∞...');
        await bot.launch();
        logger.info('‚úÖ KeyChat –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é
        await bot.telegram.setMyCommands([
            { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
            { command: 'help', description: '–ü–æ–º–æ—â—å' },
            { command: 'stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' }
        ]);
        
    } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        process.exit(1);
    }
}

// –ö–æ–º–∞–Ω–¥–∞ help
bot.help(async (ctx) => {
    await ctx.reply(
        'üîë *KeyChat - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π*\n\n' +
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
        '/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n' +
        '/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.',
        { 
            parse_mode: 'Markdown',
            ...mainKeyboard() 
        }
    );
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.command('stats', async (ctx) => {
    try {
        const stats = await monitoringService.getMonitoringStats();
        
        if (!stats) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
            return;
        }

        const statusEmoji = stats.is_running ? '‚úÖ' : '‚ùå';
        const statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ KeyChat*

${statusEmoji} –°—Ç–∞—Ç—É—Å: ${stats.is_running ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.active_users || 0}
üîë –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${stats.total_keywords || 0}
üí¨ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã—Ö —á–∞—Ç–æ–≤: ${stats.monitored_chats || 0}
üéØ –ù–∞–π–¥–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.found_today || 0}

üìã *–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ä—É–µ–º—ã–µ —á–∞—Ç—ã (–ê—Ä–±–∏—Ç—Ä–∞–∂):*
‚Ä¢ @vantor_casino
‚Ä¢ @cpa_podslushano
‚Ä¢ @ohmyclick_chat
‚Ä¢ @affilchat
‚Ä¢ @BrokerCredlt
‚Ä¢ @rabotaa_onlayn
‚Ä¢ @rabota_chatz
‚Ä¢ @solobuyernotes

‚è±Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}`;

        await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
        
    } catch (error) {
        logger.error('Error in stats command:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
});

startBot();