#!/usr/bin/env node

// –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ KeyChat Bot\n');

const questions = [
    {
        key: 'BOT_TOKEN',
        question: '–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: ',
        default: '8005234484:AAG4Hvw_6g10wUFCuAZHk9Q3NPQHamKD20Q',
        required: true
    },
    {
        key: 'API_ID', 
        question: '–í–≤–µ–¥–∏—Ç–µ Telegram API ID: ',
        default: '29818657',
        required: true
    },
    {
        key: 'API_HASH',
        question: '–í–≤–µ–¥–∏—Ç–µ Telegram API Hash: ',
        default: 'a923ae184421dca49c5d64641ddcef94',
        required: true
    },
    {
        key: 'ADMIN_USER_ID',
        question: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏): ',
        default: '123456789',
        required: false
    },
    {
        key: 'SUPPORT_USERNAME',
        question: 'Username –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–±–µ–∑ @): ',
        default: 'support_keychat',
        required: false
    }
];

const config = {
    DATABASE_PATH: './database/keychat.db',
    FREE_TRIAL_HOURS: '5',
    REFERRAL_BONUS_DAYS: '10',
    SUPPORT_EMAIL: 'support@keychat.pro',
    DEBUG: 'true',
    NODE_ENV: 'development'
};

async function askQuestion(question) {
    return new Promise((resolve) => {
        const prompt = `${question.question}${question.default ? `(${question.default}) ` : ''}`;
        rl.question(prompt, (answer) => {
            resolve(answer.trim() || question.default);
        });
    });
}

async function setup() {
    try {
        console.log('–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ Enter.\n');

        for (const question of questions) {
            const answer = await askQuestion(question);
            
            if (question.required && !answer) {
                console.log(`‚ùå –ü–æ–ª–µ "${question.key}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!`);
                process.exit(1);
            }
            
            if (answer) {
                config[question.key] = answer;
            }
        }

        // –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        const envContent = Object.entries(config)
            .map(([key, value]) => `${key}=${value}`)
            .join('\n');

        fs.writeFileSync('.env', envContent);
        
        console.log('\n‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log('\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
        console.log('‚îú‚îÄ‚îÄ Bot Token:', config.BOT_TOKEN ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        console.log('‚îú‚îÄ‚îÄ API ID:', config.API_ID ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        console.log('‚îú‚îÄ‚îÄ API Hash:', config.API_HASH ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        console.log('‚îî‚îÄ‚îÄ Admin ID:', config.ADMIN_USER_ID || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

        console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        console.log('1. npm install           # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
        console.log('2. npm run init-db       # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î');
        console.log('3. npm run test          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        console.log('4. npm start             # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message);
        process.exit(1);
    } finally {
        rl.close();
    }
}

setup();